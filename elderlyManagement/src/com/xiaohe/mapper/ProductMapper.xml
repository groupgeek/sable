<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaohe.mapper.ProductMapper">
	<resultMap id="BaseResultMap" type="com.xiaohe.bean.Product">
		<id column="productId" property="productid" jdbcType="INTEGER" />
		<result column="productName" property="productname" jdbcType="VARCHAR" />
		<result column="inStock" property="instock" jdbcType="INTEGER" />
		<result column="price" property="price" jdbcType="DECIMAL" />
		<result column="picture" property="picture" jdbcType="VARCHAR" />
		<result column="shelves" property="shelves" jdbcType="BIT" />
		<result column="buyNo" property="buyno" jdbcType="INTEGER" />
		<result column="purchasePrice" property="purchaseprice"
			jdbcType="DECIMAL" />
		<result column="productTypeId" property="producttypeid"
			jdbcType="INTEGER" />
		<result column="branchId" property="branchid" jdbcType="INTEGER" />
		<result column="discount" property="discount" jdbcType="BIT" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.xiaohe.bean.Product"
		extends="BaseResultMap">
		<result column="description" property="description" jdbcType="LONGVARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		productId, productName, inStock, price, picture, shelves,
		buyNo, purchasePrice,
		productTypeId,
		branchId, discount
	</sql>
	<sql id="Blob_Column_List">
		description
	</sql>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from product
		where productId = #{productid,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		product
		where productId = #{productid,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.xiaohe.bean.Product">
		insert into product
		(productId, productName, inStock,
		price, picture, shelves,
		buyNo,
		purchasePrice, productTypeId,
		branchId, discount, description
		)
		values
		(#{productid,jdbcType=INTEGER}, #{productname,jdbcType=VARCHAR},
		#{instock,jdbcType=INTEGER},
		#{price,jdbcType=DECIMAL},
		#{picture,jdbcType=VARCHAR}, #{shelves,jdbcType=BIT},
		#{buyno,jdbcType=INTEGER}, #{purchaseprice,jdbcType=DECIMAL},
		#{producttypeid,jdbcType=INTEGER},
		#{branchid,jdbcType=INTEGER},
		#{discount,jdbcType=BIT}, #{description,jdbcType=LONGVARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.xiaohe.bean.Product">
		insert into product
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="productid != null">
				productId,
			</if>
			<if test="productname != null">
				productName,
			</if>
			<if test="instock != null">
				inStock,
			</if>
			<if test="price != null">
				price,
			</if>
			<if test="picture != null">
				picture,
			</if>
			<if test="shelves != null">
				shelves,
			</if>
			<if test="buyno != null">
				buyNo,
			</if>
			<if test="purchaseprice != null">
				purchasePrice,
			</if>
			<if test="producttypeid != null">
				productTypeId,
			</if>
			<if test="branchid != null">
				branchId,
			</if>
			<if test="discount != null">
				discount,
			</if>
			<if test="description != null">
				description,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="productid != null">
				#{productid,jdbcType=INTEGER},
			</if>
			<if test="productname != null">
				#{productname,jdbcType=VARCHAR},
			</if>
			<if test="instock != null">
				#{instock,jdbcType=INTEGER},
			</if>
			<if test="price != null">
				#{price,jdbcType=DECIMAL},
			</if>
			<if test="picture != null">
				#{picture,jdbcType=VARCHAR},
			</if>
			<if test="shelves != null">
				#{shelves,jdbcType=BIT},
			</if>
			<if test="buyno != null">
				#{buyno,jdbcType=INTEGER},
			</if>
			<if test="purchaseprice != null">
				#{purchaseprice,jdbcType=DECIMAL},
			</if>
			<if test="producttypeid != null">
				#{producttypeid,jdbcType=INTEGER},
			</if>
			<if test="branchid != null">
				#{branchid,jdbcType=INTEGER},
			</if>
			<if test="discount != null">
				#{discount,jdbcType=BIT},
			</if>
			<if test="description != null">
				#{description,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.xiaohe.bean.Product">
		update product
		<set>
			<if test="productname != null">
				productName = #{productname,jdbcType=VARCHAR},
			</if>
			<if test="instock != null">
				inStock = #{instock,jdbcType=INTEGER},
			</if>
			<if test="price != null">
				price = #{price,jdbcType=DECIMAL},
			</if>
			<if test="picture != null">
				picture = #{picture,jdbcType=VARCHAR},
			</if>
			<if test="shelves != null">
				shelves = #{shelves,jdbcType=BIT},
			</if>
			<if test="buyno != null">
				buyNo = #{buyno,jdbcType=INTEGER},
			</if>
			<if test="purchaseprice != null">
				purchasePrice = #{purchaseprice,jdbcType=DECIMAL},
			</if>
			<if test="producttypeid != null">
				productTypeId = #{producttypeid,jdbcType=INTEGER},
			</if>
			<if test="branchid != null">
				branchId = #{branchid,jdbcType=INTEGER},
			</if>
			<if test="discount != null">
				discount = #{discount,jdbcType=BIT},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where productId = #{productid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xiaohe.bean.Product">
		update
		product
		set productName = #{productname,jdbcType=VARCHAR},
		inStock =
		#{instock,jdbcType=INTEGER},
		price = #{price,jdbcType=DECIMAL},
		picture
		= #{picture,jdbcType=VARCHAR},
		shelves = #{shelves,jdbcType=BIT},
		buyNo
		= #{buyno,jdbcType=INTEGER},
		purchasePrice =
		#{purchaseprice,jdbcType=DECIMAL},
		productTypeId =
		#{producttypeid,jdbcType=INTEGER},
		branchId =
		#{branchid,jdbcType=INTEGER},
		discount = #{discount,jdbcType=BIT},
		description = #{description,jdbcType=LONGVARCHAR}
		where productId =
		#{productid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.xiaohe.bean.Product">
		update product
		set
		productName = #{productname,jdbcType=VARCHAR},
		inStock =
		#{instock,jdbcType=INTEGER},
		price = #{price,jdbcType=DECIMAL},
		picture
		= #{picture,jdbcType=VARCHAR},
		shelves = #{shelves,jdbcType=BIT},
		buyNo
		= #{buyno,jdbcType=INTEGER},
		purchasePrice =
		#{purchaseprice,jdbcType=DECIMAL},
		productTypeId =
		#{producttypeid,jdbcType=INTEGER},
		branchId =
		#{branchid,jdbcType=INTEGER},
		discount = #{discount,jdbcType=BIT}
		where
		productId = #{productid,jdbcType=INTEGER}
	</update>

	<sql id="productByCondition">
		<if test="productid != null">
			AND productId = #{productid,jdbcType=INTEGER}
		</if>
		<if test="productname != null">
			AND productName LIKE '%${productname}%'
		</if>
		<if test="instock != null">
			AND inStock = #{instock,jdbcType=INTEGER}
		</if>
		<if test="price != null">
			AND price = #{price,jdbcType=DECIMAL}
		</if>
		<if test="picture != null">
			AND picture = #{picture,jdbcType=VARCHAR}
		</if>
		<if test="shelves != null">
			AND shelves = #{shelves,jdbcType=BIT}
		</if>
		<if test="buyno != null">
			AND buyNo = #{buyno,jdbcType=INTEGER}
		</if>
		<if test="purchaseprice != null">
			AND purchasePrice = #{purchaseprice,jdbcType=DECIMAL}
		</if>
		<if test="producttypeid != null">
			AND productTypeId = #{producttypeid,jdbcType=INTEGER}
		</if>
		<if test="branchid != null">
			AND branchId = #{branchid,jdbcType=INTEGER}
		</if>
		<if test="discount != null">
			AND discount = #{discount,jdbcType=BIT}
		</if>
		<if test="description != null">
			AND description LIKE '%${description}%'
		</if>

	</sql>

	<select id="selectPopularProductByCondition" parameterType="productCustom"
		resultType="productCustom">
		select p.* ,b.branchName ,a.areaAddress, a.areaName FROM product p, branch b, area a 
		<where>
			b.areaId = a.areaId AND p.branchId = b.branchId
			<include refid="productByCondition"></include>
		</where>

		ORDER BY buyNo DESC
		<if test="begin != null">
			<if test="total != null">
				LIMIT #{begin} , #{total};
			</if>
		</if>

	</select>

</mapper>